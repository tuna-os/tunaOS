---
name: Build ISO
on:
  workflow_call:
    inputs:
      image_variant:
        description: 'Image variant to build (yellowfin, albacore, skipjack, bonito)'
        required: true
        type: string
      flavor:
        description: 'Flavor (base, dx, gdx)'
        required: true
        type: string
      platform:
        description: 'Platform to build for (e.g. linux/amd64, linux/arm64)'
        required: true
        type: string
      default_tag:
        description: 'Tag to use for the base image'
        required: false
        type: string
        default: 'latest'
      upload_r2:
        description: 'Upload built ISOs to Cloudflare R2'
        required: false
        type: boolean
        default: false
      upload_artifacts:
        description: 'Upload built ISOs to GitHub Artifacts'
        required: false
        type: boolean
        default: false
    secrets:
      R2_ACCESS_KEY_ID_2025:
        description: 'R2 Access Key ID'
        required: false
      R2_SECRET_ACCESS_KEY_2025:
        description: 'R2 Secret Access Key'
        required: false
      R2_ENDPOINT_2025:
        description: 'R2 Endpoint'
        required: false

env:
  IMAGE_VARIANT: ${{ inputs.image_variant }}
  FLAVOR: ${{ inputs.flavor }}
  PLATFORM: ${{ inputs.platform }}
  DEFAULT_TAG: ${{ inputs.default_tag }}

jobs:
  build:
    name: Build ISO - ${{ inputs.image_variant }}-${{ inputs.flavor }}-${{ inputs.platform }}
    runs-on: ${{ contains(inputs.platform, 'amd64') && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Install dependencies
        if: contains(inputs.platform, 'arm64')
        run: |
          set -x
          sudo apt update -y
          sudo apt install -y podman

      - name: Maximize build space (remove-software)
        if: "!contains(inputs.platform, 'arm64')"
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Maximize build space
        uses: ublue-os/container-storage-action@911baca08baf30c8654933e9e9723cb399892140
        continue-on-error: true
        with:
          target-dir: /var/lib/containers
          mount-opts: compress-force=zstd:2
          loopback-free: 0.9

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Check Just Syntax
        shell: bash
        run: |
          just check

      - name: Generate Image Reference and Artifact Names
        id: image-ref
        shell: bash
        env:
          VARIANT: ${{ env.IMAGE_VARIANT }}
          FLAVOR: ${{ env.FLAVOR }}
          PLATFORM: ${{ env.PLATFORM }}
          TAG: ${{ env.DEFAULT_TAG }}
        run: |
          # Generate image suffix for container image name
          if [[ "${FLAVOR}" == "base" ]]; then
            IMAGE_SUFFIX=""
          else
            IMAGE_SUFFIX="-${FLAVOR}"
          fi
          echo "image_suffix=${IMAGE_SUFFIX}" >> $GITHUB_OUTPUT
          
          # Create safe platform name for artifacts
          SAFE_PLATFORM="${PLATFORM//\//-}"
          
          # Generate artifact name
          if [[ "${FLAVOR}" == "base" ]]; then
            ARTIFACT_FORMAT="${VARIANT}-${TAG}-${SAFE_PLATFORM}"
          else
            ARTIFACT_FORMAT="${VARIANT}-${FLAVOR}-${TAG}-${SAFE_PLATFORM}"
          fi
          
          echo "artifact_format=${ARTIFACT_FORMAT}" >> $GITHUB_OUTPUT
          echo "safe_platform=${SAFE_PLATFORM}" >> $GITHUB_OUTPUT
          echo "image_ref=ghcr.io/${{ github.repository_owner }}/${VARIANT}${IMAGE_SUFFIX}:${TAG}" >> $GITHUB_OUTPUT

      - name: Build ISO
        id: build
        uses: ublue-os/titanoboa@main
        with:
          image-ref: ${{ steps.image-ref.outputs.image_ref }}
          flatpaks-list: ${{ github.workspace }}/system_files/etc/ublue-os/system-flatpaks.list
          hook-post-rootfs: ${{ github.workspace }}/iso_files/configure_lts_iso_anaconda.sh
          builder-distro: ${{ env.IMAGE_VARIANT == 'yellowfin' && 'almalinux' || env.IMAGE_VARIANT == 'albacore' && 'almalinux' || env.IMAGE_VARIANT == 'skipjack' && 'centos' || env.IMAGE_VARIANT == 'bonito' && 'fedora' }}

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
          OUTPUT_NAME: ${{ steps.image-ref.outputs.artifact_format }}
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          
          # Generate checksums and rename ISO
          sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso-CHECKSUM"
          mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso"
          
          echo "output_directory=${OUTPUT_DIRECTORY}" >> $GITHUB_OUTPUT
          echo "iso_file=${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso" >> $GITHUB_OUTPUT
          echo "checksum_file=${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso-CHECKSUM" >> $GITHUB_OUTPUT

      - name: Upload to Job Artifacts
        if: inputs.upload_artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.image-ref.outputs.artifact_format }}
          if-no-files-found: error
          path: ${{ steps.rename.outputs.output_directory }}

      - name: Upload to CloudFlare R2
        if: inputs.upload_r2
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID_2025 }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY_2025 }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT_2025 }}
          SOURCE_DIR: ${{ steps.rename.outputs.output_directory }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy --log-level INFO --checksum "${SOURCE_DIR}" R2:tunaos

    outputs:
      iso_file: ${{ steps.rename.outputs.iso_file }}
      checksum_file: ${{ steps.rename.outputs.checksum_file }}
      artifact_name: ${{ steps.image-ref.outputs.artifact_format }}
