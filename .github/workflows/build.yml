name: Build
on:
  pull_request: 
    branches:
      - main
    paths:
      - '.github/workflows/reusable-build-image.yml'
      - 'build_scripts/**'
      - 'Containerfile*'
      - 'Justfile'
      - 'system_files/**'
      - 'system_files_overrides/**'
  schedule:
    - cron: "0 1 * * TUE" # Every Tuesday at 1am UTC
  merge_group:
  workflow_dispatch:
    inputs:
      image_variant:
        description: 'Image variant to build (yellowfin, albacore, centos, fedora, all)'
        required: false
        default: 'all'
        type: choice
        options:
        - yellowfin
        - albacore
        # - skipjack
        # - bonito
        - all
      build_variant:
        description: 'Build variant (base, dx, gdx)'
        required: false
        default: 'base,dx,gdx'
        type: choice
        options:
        - base
        - base,dx
        - base,dx,gdx
      platforms:
        description: 'Platforms to build'
        required: false
        default: ''
        type: choice
        options:
        - ''
        - linux/amd64
        - linux/amd64/v2
        - linux/arm64
        - linux/amd64,linux/arm64
        - linux/amd64,linux/amd64/v2,linux/arm64


# Declare default permissions as read only.
permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image_variant || 'auto' }}-${{ inputs.build_variant || 'auto' }}
  cancel-in-progress: true

jobs:
  # Generate build matrix for image variants
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout for config
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4
        
      - name: Generate image variant build matrix
        id: set-matrix
        run: |
          # Determine which image variants to build
          IMAGE_VARIANTS="yellowfin albacore"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.image_variant }}" != "all" ]]; then
              IMAGE_VARIANTS="${{ inputs.image_variant }}"
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
              # For PRs, default to yellowfin and albacore
              IMAGE_VARIANTS="yellowfin albacore"
            else
              # Include all variants when explicitly requested
              IMAGE_VARIANTS="yellowfin albacore" # skipjack bonito"
            fi
          fi
          
          # Generate matrix
          MATRIX="{\"include\":[]}"
          for image_variant in $IMAGE_VARIANTS; do
            # Set image-specific values
            case "$image_variant" in
              yellowfin)
                DESCRIPTION="🐠 Based on AlmaLinux Kitten 10"
                PLATFORMS="linux/arm64,linux/amd64,linux/amd64/v2"
                ;;
              albacore)
                DESCRIPTION="🐟 Based on AlmaLinux 10"
                PLATFORMS="linux/arm64,linux/amd64,linux/amd64/v2"
                ;;
              skipjack)
                DESCRIPTION="🏛️ Based on CentOS Stream 10"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
              bonito)
                DESCRIPTION="🎩 Based on Fedora 42"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
              bonito-rawhide)
                DESCRIPTION="🎩 Based on Fedora Rawhide"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
            esac
            
            # Determine image name and tag
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              IMAGE_NAME="${image_variant}"
              TAG="pr-${{ github.event.pull_request.number }}"
            else
              IMAGE_NAME="${image_variant}"
              TAG="${{ (github.ref_name == 'main' && github.event_name != 'pull_request') && 'latest' || github.sha }}"
            fi
            
            # If Platforms is set
            if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.platforms }}" ]]; then
              PLATFORMS="${{ inputs.platforms }}"
            fi
            # Add to matrix
            MATRIX="$(echo "${MATRIX}" | jq ".include += [{
              \"image_variant\": \"${image_variant}\",
              \"image_name\": \"${IMAGE_NAME}\",
              \"default_tag\": \"${TAG}\",
              \"platforms\": \"${PLATFORMS}\",
              \"description\": \"${DESCRIPTION}\",
              \"rechunk\": ${{ github.event_name != 'pull_request' }},
              \"sbom\": false,
              \"publish\": true, 
            }]")"
          done
          
          echo "matrix=$(echo "${MATRIX}" | jq -c '.')" >> $GITHUB_OUTPUT

  # Build base images (base for chaining)
  build-base:
    needs: generate_matrix
    # Only run if base or all variants are requested
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.build_variant == 'base' ||
      inputs.build_variant == 'base,dx' ||
      inputs.build_variant == 'base,dx,gdx'
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    uses: ./.github/workflows/reusable-build-image.yml
    secrets: inherit
    with:
      image-name: ${{ matrix.image_name }}
      image-desc: ${{ matrix.description }}
      image-variant: ${{ matrix.image_variant }}
      flavor: base
      platforms: ${{ matrix.platforms }}
      major-version: ${{ matrix.major_version }}
      default-tag: ${{ matrix.default_tag }}
      rechunk: ${{ matrix.rechunk }}
      sbom: ${{ matrix.sbom }}
      publish: ${{ matrix.publish }}

  # Build DX images (chain from base)
  build-dx:
    needs: [generate_matrix, build-base]
    # Only run if dx or all variants are requested
    if: |
      (github.event_name != 'workflow_dispatch' && github.event_name != 'pull_request') ||
      inputs.build_variant == 'base,dx' ||
      inputs.build_variant == 'base,dx,gdx' ||
      inputs.build_variant == 'dx,gdx' ||
      inputs.build_variant == 'dx'
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    uses: ./.github/workflows/reusable-build-image.yml
    secrets: inherit
    with:
      image-name: ${{ matrix.image_name }}-dx
      image-desc: ${{ matrix.description }} DX
      image-variant: ${{ matrix.image_variant }}
      flavor: dx
      platforms: ${{ matrix.platforms }}
      default-tag: ${{ matrix.default_tag }}
      rechunk: ${{ matrix.rechunk }}
      sbom: ${{ matrix.sbom }}
      publish: ${{ github.event_name != 'pull_request' }}

  # Build GDX images (chain from DX)
  build-gdx:
    needs: [generate_matrix, build-dx]
    # Only run if gdx or all variants are requested
    if: |
      (github.event_name != 'workflow_dispatch' && github.event_name != 'pull_request') ||
      inputs.build_variant == 'base,dx,gdx' ||
      inputs.build_variant == 'gdx' ||
      inputs.build_variant == 'dx,gdx'
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    uses: ./.github/workflows/reusable-build-image.yml
    secrets: inherit
    with:
      image-name: ${{ matrix.image_name }}-gdx
      image-desc: ${{ matrix.description }} GDX
      image-variant: ${{ matrix.image_variant }}
      flavor: gdx
      platforms: ${{ matrix.platforms }}
      default-tag: ${{ matrix.default_tag }}
      rechunk: ${{ matrix.rechunk }}
      sbom: ${{ matrix.sbom }}
      publish: ${{ github.event_name != 'pull_request' }}
      remove-unwanted-software: true
