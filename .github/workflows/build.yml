name: Build
on:
  pull_request: 
    branches:
      - main
  schedule:
    - cron: "0 1 * * TUE" # Every Tuesday at 1am UTC
  merge_group:
  workflow_dispatch:
    inputs:
      image_variant:
        description: 'Image variant to build (yellowfin, albacore, centos, fedora, all)'
        required: false
        default: 'all'
        type: choice
        options:
        - yellowfin
        - albacore
        # - skipjack
        # - bonito
        - all
      build_variant:
        description: 'Build variant (base, dx, gdx)'
        required: false
        default: 'base,dx,gdx'
        type: choice
        options:
        - base
        - base,dx
        - base,dx,gdx
        - dx
        - gdx
        - dx,gdx
      platforms:
        description: 'Platforms to build'
        required: false
        default: ''
        type: choice
        options:
        - ''
        - linux/amd64
        - linux/amd64/v2
        - linux/arm64
        - linux/amd64,linux/arm64
        - linux/amd64,linux/amd64/v2,linux/arm64


concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image_variant || 'auto' }}-${{ inputs.build_variant || 'auto' }}
  cancel-in-progress: true

jobs:
  # Generate build matrix for image variants
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout for config
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        
      - name: Generate image variant build matrix
        id: set-matrix
        run: |
          # Determine which image variants to build
          IMAGE_VARIANTS="yellowfin albacore"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.image_variant }}" != "all" ]]; then
              IMAGE_VARIANTS="${{ inputs.image_variant }}"
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
              # For PRs, default to yellowfin and albacore
              IMAGE_VARIANTS="yellowfin albacore"
            else
              # Include all variants when explicitly requested
              IMAGE_VARIANTS="yellowfin albacore" # skipjack bonito"
            fi
          fi
          
          # Generate matrix
          MATRIX="{\"include\":[]}"
          for image_variant in $IMAGE_VARIANTS; do
            # Set image-specific values
            case "$image_variant" in
              yellowfin)
                DESCRIPTION="üê† Based on AlmaLinux Kitten 10"
                PLATFORMS="linux/arm64,linux/amd64,linux/amd64/v2"
                ;;
              albacore)
                DESCRIPTION="üêü Based on AlmaLinux 10"
                PLATFORMS="linux/arm64,linux/amd64,linux/amd64/v2"
                ;;
              skipjack)
                DESCRIPTION="üèõÔ∏è Based on CentOS Stream 10"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
              bonito)
                DESCRIPTION="üé© Based on Fedora 42"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
              bonito-rawhide)
                DESCRIPTION="üé© Based on Fedora Rawhide"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
            esac
            
            # Determine image name and tag
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              IMAGE_NAME="${image_variant}"
              TAG="pr-${{ github.event.pull_request.number }}"
            else
              IMAGE_NAME="${image_variant}"
              TAG="${{ (github.ref_name == 'main' && github.event_name != 'pull_request') && 'latest' || github.sha }}"
            fi
            
            # If Platforms is set
            if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.platforms }}" ]]; then
              PLATFORMS="${{ inputs.platforms }}"
            fi
            # Add to matrix
            MATRIX="$(echo "${MATRIX}" | jq ".include += [{
              \"image_variant\": \"${image_variant}\",
              \"image_name\": \"${IMAGE_NAME}\",
              \"default_tag\": \"${TAG}\",
              \"platforms\": \"${PLATFORMS}\",
              \"description\": \"${DESCRIPTION}\",
              \"rechunk\": ${{ github.event_name != 'pull_request' }},
              \"sbom\": false,
              \"publish\": true, 
            }]")"
          done
          
          echo "matrix=$(echo "${MATRIX}" | jq -c '.')" >> $GITHUB_OUTPUT

  # Build base images (base for chaining)
  build-base:
    needs: generate_matrix
    # Only run if base or all variants are requested
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.build_variant == 'base' ||
      inputs.build_variant == 'base,dx' ||
      inputs.build_variant == 'base,dx,gdx'
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    uses: ./.github/workflows/reusable-build-image.yml
    secrets: inherit
    with:
      image-name: ${{ matrix.image_name }}
      image-desc: ${{ matrix.description }}
      image-variant: ${{ matrix.image_variant }}
      flavor: base
      platforms: ${{ matrix.platforms }}
      major-version: ${{ matrix.major_version }}
      default-tag: ${{ matrix.default_tag }}
      rechunk: ${{ matrix.rechunk }}
      sbom: ${{ matrix.sbom }}
      publish: ${{ matrix.publish }}

  # Verify base image manifests contain all intended platforms
  verify-base-manifests:
    needs: [generate_matrix, build-base]
    if: |
      always() && 
      needs.build-base.result == 'success' &&
      (
        (github.event_name != 'workflow_dispatch' && github.event_name != 'pull_request') ||
        inputs.build_variant == 'base,dx' ||
        inputs.build_variant == 'base,dx,gdx' ||
        inputs.build_variant == 'dx,gdx' ||
        inputs.build_variant == 'dx'
      )
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Login to GitHub Container Registry
        env:
          REGISTRY: ghcr.io
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login -u "${{ github.actor }}" --password-stdin "${REGISTRY}"

      - name: Verify Multiplatform Manifest
        env:
          IMAGE_NAME: ${{ matrix.image_name }}
          IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
          DEFAULT_TAG: ${{ matrix.default_tag }}
          EXPECTED_PLATFORMS: ${{ matrix.platforms }}
        run: |
          set -euo pipefail
          
          IMAGE_FULL="${IMAGE_REGISTRY}/${IMAGE_NAME}:${DEFAULT_TAG}"
          echo "Verifying manifest for image: ${IMAGE_FULL}"
          echo "Expected platforms: ${EXPECTED_PLATFORMS}"
          
          # Get the manifest
          MANIFEST_JSON=$(podman manifest inspect "${IMAGE_FULL}" 2>/dev/null || {
            echo "‚ùå Failed to get manifest for ${IMAGE_FULL}"
            exit 1
          })
          
          # Extract actual platforms from manifest
          ACTUAL_PLATFORMS=$(echo "${MANIFEST_JSON}" | jq -r '.manifests[].platform | "\(.os)/\(.architecture)" + (if .variant then "/\(.variant)" else "" end)' | sort | tr '\n' ',' | sed 's/,$//')
          
          echo "Actual platforms in manifest: ${ACTUAL_PLATFORMS}"
          
          # Convert expected platforms to sorted list for comparison
          EXPECTED_SORTED=$(echo "${EXPECTED_PLATFORMS}" | tr ',' '\n' | sort | tr '\n' ',' | sed 's/,$//')
          
          if [ "${ACTUAL_PLATFORMS}" = "${EXPECTED_SORTED}" ]; then
            echo "‚úÖ Manifest verification successful - all expected platforms present"
          else
            echo "‚ùå Manifest verification failed"
            echo "Expected: ${EXPECTED_SORTED}"
            echo "Actual:   ${ACTUAL_PLATFORMS}"
            exit 1
          fi

  # Build DX images (chain from base)
  build-dx:
    needs: [generate_matrix, verify-base-manifests]
    # Only run if dx or all variants are requested AND base verification completed successfully
    if: |
      always() && 
      needs.verify-base-manifests.result == 'success' &&
      (
        (github.event_name != 'workflow_dispatch' && github.event_name != 'pull_request') ||
        inputs.build_variant == 'base,dx' ||
        inputs.build_variant == 'base,dx,gdx' ||
        inputs.build_variant == 'dx,gdx' ||
        inputs.build_variant == 'dx'
      )
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    uses: ./.github/workflows/reusable-build-image.yml
    secrets: inherit
    with:
      image-name: ${{ matrix.image_name }}-dx
      image-desc: ${{ matrix.description }} DX
      image-variant: ${{ matrix.image_variant }}
      flavor: dx
      platforms: ${{ matrix.platforms }}
      default-tag: ${{ matrix.default_tag }}
      rechunk: ${{ matrix.rechunk }}
      sbom: ${{ matrix.sbom }}
      publish: ${{ github.event_name != 'pull_request' }}

  # Verify DX image manifests contain all intended platforms
  verify-dx-manifests:
    needs: [generate_matrix, build-dx]
    if: |
      always() && 
      needs.build-dx.result == 'success' &&
      (
        (github.event_name != 'workflow_dispatch' && github.event_name != 'pull_request') ||
        inputs.build_variant == 'base,dx,gdx' ||
        inputs.build_variant == 'gdx' ||
        inputs.build_variant == 'dx,gdx'
      )
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Login to GitHub Container Registry
        env:
          REGISTRY: ghcr.io
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login -u "${{ github.actor }}" --password-stdin "${REGISTRY}"

      - name: Verify Multiplatform Manifest
        env:
          IMAGE_NAME: ${{ matrix.image_name }}-dx
          IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
          DEFAULT_TAG: ${{ matrix.default_tag }}
          EXPECTED_PLATFORMS: ${{ matrix.platforms }}
        run: |
          set -euo pipefail
          
          IMAGE_FULL="${IMAGE_REGISTRY}/${IMAGE_NAME}:${DEFAULT_TAG}"
          echo "Verifying manifest for image: ${IMAGE_FULL}"
          echo "Expected platforms: ${EXPECTED_PLATFORMS}"
          
          # Get the manifest
          MANIFEST_JSON=$(podman manifest inspect "${IMAGE_FULL}" 2>/dev/null || {
            echo "‚ùå Failed to get manifest for ${IMAGE_FULL}"
            exit 1
          })
          
          # Extract actual platforms from manifest
          ACTUAL_PLATFORMS=$(echo "${MANIFEST_JSON}" | jq -r '.manifests[].platform | "\(.os)/\(.architecture)" + (if .variant then "/\(.variant)" else "" end)' | sort | tr '\n' ',' | sed 's/,$//')
          
          echo "Actual platforms in manifest: ${ACTUAL_PLATFORMS}"
          
          # Convert expected platforms to sorted list for comparison
          EXPECTED_SORTED=$(echo "${EXPECTED_PLATFORMS}" | tr ',' '\n' | sort | tr '\n' ',' | sed 's/,$//')
          
          if [ "${ACTUAL_PLATFORMS}" = "${EXPECTED_SORTED}" ]; then
            echo "‚úÖ Manifest verification successful - all expected platforms present"
          else
            echo "‚ùå Manifest verification failed"
            echo "Expected: ${EXPECTED_SORTED}"
            echo "Actual:   ${ACTUAL_PLATFORMS}"
            exit 1
          fi

  # Build GDX images (chain from DX)
  build-gdx:
    needs: [generate_matrix, verify-dx-manifests]
    # Only run if gdx or all variants are requested AND dx verification completed successfully
    if: |
      always() && 
      needs.verify-dx-manifests.result == 'success' &&
      (
        (github.event_name != 'workflow_dispatch' && github.event_name != 'pull_request') ||
        inputs.build_variant == 'base,dx,gdx' ||
        inputs.build_variant == 'gdx' ||
        inputs.build_variant == 'dx,gdx'
      )
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    uses: ./.github/workflows/reusable-build-image.yml
    secrets: inherit
    with:
      image-name: ${{ matrix.image_name }}-gdx
      image-desc: ${{ matrix.description }} GDX
      image-variant: ${{ matrix.image_variant }}
      flavor: gdx
      platforms: ${{ matrix.platforms }}
      default-tag: ${{ matrix.default_tag }}
      rechunk: ${{ matrix.rechunk }}
      sbom: ${{ matrix.sbom }}
      publish: ${{ github.event_name != 'pull_request' }}

  # Verify GDX image manifests contain all intended platforms
  verify-gdx-manifests:
    needs: [generate_matrix, build-gdx]
    if: |
      always() && 
      needs.build-gdx.result == 'success'
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Login to GitHub Container Registry
        env:
          REGISTRY: ghcr.io
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login -u "${{ github.actor }}" --password-stdin "${REGISTRY}"

      - name: Verify Multiplatform Manifest
        env:
          IMAGE_NAME: ${{ matrix.image_name }}-gdx
          IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
          DEFAULT_TAG: ${{ matrix.default_tag }}
          EXPECTED_PLATFORMS: ${{ matrix.platforms }}
        run: |
          set -euo pipefail
          
          IMAGE_FULL="${IMAGE_REGISTRY}/${IMAGE_NAME}:${DEFAULT_TAG}"
          echo "Verifying manifest for image: ${IMAGE_FULL}"
          echo "Expected platforms: ${EXPECTED_PLATFORMS}"
          
          # Get the manifest
          MANIFEST_JSON=$(podman manifest inspect "${IMAGE_FULL}" 2>/dev/null || {
            echo "‚ùå Failed to get manifest for ${IMAGE_FULL}"
            exit 1
          })
          
          # Extract actual platforms from manifest
          ACTUAL_PLATFORMS=$(echo "${MANIFEST_JSON}" | jq -r '.manifests[].platform | "\(.os)/\(.architecture)" + (if .variant then "/\(.variant)" else "" end)' | sort | tr '\n' ',' | sed 's/,$//')
          
          echo "Actual platforms in manifest: ${ACTUAL_PLATFORMS}"
          
          # Convert expected platforms to sorted list for comparison
          EXPECTED_SORTED=$(echo "${EXPECTED_PLATFORMS}" | tr ',' '\n' | sort | tr '\n' ',' | sed 's/,$//')
          
          if [ "${ACTUAL_PLATFORMS}" = "${EXPECTED_SORTED}" ]; then
            echo "‚úÖ Manifest verification successful - all expected platforms present"
          else
            echo "‚ùå Manifest verification failed"
            echo "Expected: ${EXPECTED_SORTED}"
            echo "Actual:   ${ACTUAL_PLATFORMS}"
            exit 1
          fi

  # Final verification that all requested build variants have proper multiplatform manifests
  verify-build-completion:
    needs: [generate_matrix, build-base, verify-base-manifests, build-dx, verify-dx-manifests, build-gdx, verify-gdx-manifests]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Check Build Results
        env:
          BUILD_VARIANT: ${{ inputs.build_variant || 'base,dx,gdx' }}
          BASE_BUILD_RESULT: ${{ needs.build-base.result }}
          BASE_VERIFY_RESULT: ${{ needs.verify-base-manifests.result }}
          DX_BUILD_RESULT: ${{ needs.build-dx.result }}
          DX_VERIFY_RESULT: ${{ needs.verify-dx-manifests.result }}
          GDX_BUILD_RESULT: ${{ needs.build-gdx.result }}
          GDX_VERIFY_RESULT: ${{ needs.verify-gdx-manifests.result }}
        run: |
          echo "Build variant requested: ${BUILD_VARIANT}"
          echo ""
          echo "Job Results:"
          echo "  Base Build: ${BASE_BUILD_RESULT}"
          echo "  Base Verify: ${BASE_VERIFY_RESULT}"
          echo "  DX Build: ${DX_BUILD_RESULT}"
          echo "  DX Verify: ${DX_VERIFY_RESULT}"
          echo "  GDX Build: ${GDX_BUILD_RESULT}"
          echo "  GDX Verify: ${GDX_VERIFY_RESULT}"
          echo ""
          
          # Check if required jobs succeeded
          FAILURES=0
          
          # Always check base if it was supposed to run
          if [[ "${BUILD_VARIANT}" == *"base"* ]] || [[ "${BUILD_VARIANT}" == "all" ]] || [[ -z "${BUILD_VARIANT}" ]]; then
            if [[ "${BASE_BUILD_RESULT}" != "success" ]]; then
              echo "‚ùå Base build failed or was skipped unexpectedly"
              FAILURES=$((FAILURES + 1))
            elif [[ "${BASE_VERIFY_RESULT}" != "success" && "${BASE_VERIFY_RESULT}" != "skipped" ]]; then
              echo "‚ùå Base manifest verification failed"
              FAILURES=$((FAILURES + 1))
            else
              echo "‚úÖ Base build and manifest verification completed successfully"
            fi
          fi
          
          # Check DX if it was supposed to run
          if [[ "${BUILD_VARIANT}" == *"dx"* ]] || [[ "${BUILD_VARIANT}" == "all" ]] || [[ -z "${BUILD_VARIANT}" ]]; then
            if [[ "${DX_BUILD_RESULT}" != "success" && "${DX_BUILD_RESULT}" != "skipped" ]]; then
              echo "‚ùå DX build failed"
              FAILURES=$((FAILURES + 1))
            elif [[ "${DX_VERIFY_RESULT}" != "success" && "${DX_VERIFY_RESULT}" != "skipped" ]]; then
              echo "‚ùå DX manifest verification failed"
              FAILURES=$((FAILURES + 1))
            else
              echo "‚úÖ DX build and manifest verification completed successfully"
            fi
          fi
          
          # Check GDX if it was supposed to run
          if [[ "${BUILD_VARIANT}" == *"gdx"* ]] || [[ "${BUILD_VARIANT}" == "all" ]] || [[ -z "${BUILD_VARIANT}" ]]; then
            if [[ "${GDX_BUILD_RESULT}" != "success" && "${GDX_BUILD_RESULT}" != "skipped" ]]; then
              echo "‚ùå GDX build failed"
              FAILURES=$((FAILURES + 1))
            elif [[ "${GDX_VERIFY_RESULT}" != "success" && "${GDX_VERIFY_RESULT}" != "skipped" ]]; then
              echo "‚ùå GDX manifest verification failed"
              FAILURES=$((FAILURES + 1))
            else
              echo "‚úÖ GDX build and manifest verification completed successfully"
            fi
          fi
          
          echo ""
          if [[ ${FAILURES} -eq 0 ]]; then
            echo "üéâ All requested build variants completed successfully with verified multiplatform manifests!"
          else
            echo "üí• ${FAILURES} build variant(s) failed"
            exit 1
          fi
