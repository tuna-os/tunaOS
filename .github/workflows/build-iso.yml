name: Build ISOs
on:
  pull_request: 
    branches:
      - main
  schedule:
    - cron: "0 1 2 * *" # The second of every month at 1am UTC
  merge_group:
  workflow_dispatch:
    inputs:
      upload_r2:
        description: 'Upload built ISOs to Cloudflare R2'
        required: false
        default: false
        type: boolean
      upload_artifacts:
        description: 'Upload built ISOs to GitHub Artifacts'
        required: false
        default: false
        type: boolean
      image_variant:
        description: 'Image variant to build (yellowfin, albacore, centos, fedora, all)'
        required: false
        default: 'all'
        type: choice
        options:
        - yellowfin
        - albacore
        # - skipjack
        # - bonito
        - all
      flavor:
        description: 'Flavor (base, dx, gdx)'
        required: false
        default: 'base,dx,gdx'
        type: choice
        options:
        - base
        - base,dx
        - base,dx,gdx
        - dx
        - gdx
        - dx,gdx
      platforms:
        description: 'Platforms to build'
        required: false
        default: ''
        type: choice
        options:
        - ''
        - linux/amd64
        - linux/amd64/v2
        - linux/arm64
        - linux/amd64,linux/arm64
        - linux/amd64,linux/amd64/v2,linux/arm64


concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image_variant || 'auto' }}-${{ inputs.build_variant || 'auto' }}
  cancel-in-progress: true

jobs:
  # Generate build matrix for image variants
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout for config
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        
      - name: Generate image variant build matrix
        id: set-matrix
        run: |
          # Determine which image variants to build
          IMAGE_VARIANTS="yellowfin albacore"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.image_variant }}" != "all" ]]; then
              IMAGE_VARIANTS="${{ inputs.image_variant }}"
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
              # For PRs, default to albacore
              IMAGE_VARIANTS="albacore"
            else
              # Include all variants when explicitly requested
              IMAGE_VARIANTS="yellowfin albacore" # skipjack bonito"
            fi
          fi
          
          # Generate matrix
          MATRIX="{\"include\":[]}"
          for image_variant in $IMAGE_VARIANTS; do
            # Set image-specific values
            case "$image_variant" in
              yellowfin)
                DESCRIPTION="🐠 Based on AlmaLinux Kitten 10"
                PLATFORMS="linux/arm64,linux/amd64,linux/amd64/v2"
                ;;
              albacore)
                DESCRIPTION="🐟 Based on AlmaLinux 10"
                PLATFORMS="linux/arm64,linux/amd64,linux/amd64/v2"
                ;;
              skipjack)
                DESCRIPTION="🏛️ Based on CentOS Stream 10"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
              bonito)
                DESCRIPTION="🎩 Based on Fedora 42"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
              bonito-rawhide)
                DESCRIPTION="🎩 Based on Fedora Rawhide"
                PLATFORMS="linux/arm64,linux/amd64"
                ;;
            esac
            
            # Determine image name and tag
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              IMAGE_NAME="${image_variant}"
              TAG="pr-${{ github.event.pull_request.number }}"
            else
              IMAGE_NAME="${image_variant}"
              TAG="${{ (github.ref_name == 'main' && github.event_name != 'pull_request') && 'latest' || github.sha }}"
            fi

            # Determine flavors
            FLAVORS="base"
            if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.flavor }}" ]]; then
              FLAVORS="${{ inputs.flavor }}"
            fi
            
            # If Platforms is set
            if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.platforms }}" ]]; then
              PLATFORMS="${{ inputs.platforms }}"
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
              PLATFORMS="linux/amd64"
            fi

            # Add to matrix for each flavor and platform
            for flavor in $(echo $FLAVORS | sed "s/,/ /g"); do
              for platform in $(echo $PLATFORMS | sed "s/,/ /g"); do
                # Get short platform name for runner
                runner_platform=$(echo $platform | cut -d'/' -f2)
                MATRIX="$(echo "${MATRIX}" | jq ".include += [{
                  \"image_variant\": \"${image_variant}\",
                  \"image_name\": \"${IMAGE_NAME}\",
                  \"default_tag\": latest,
                  \"flavor\": \"${flavor}\",
                  \"platform\": \"${platform}\",
                  \"runner_platform\": \"${runner_platform}\",
                  \"description\": \"${DESCRIPTION}\",
                  \"rechunk\": ${{ github.event_name != 'pull_request' }},
                  \"sbom\": false,
                  \"publish\": true, 
                }]")"
              done
            done
          done
          
          echo "matrix=$(echo "${MATRIX}" | jq -c '.')" >> $GITHUB_OUTPUT


  build:
    name: Build ISOs
    runs-on: ${{ matrix.runner_platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate_matrix.outputs.matrix) }}
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Install dependencies
        if: matrix.platform == 'arm64'
        run: |
          set -x
          sudo apt update -y
          sudo apt install -y \
            podman

      - name: Maximize build space (remove-software)
        if: matrix.platform != 'arm64'
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Maximize build space
        uses: ublue-os/container-storage-action@911baca08baf30c8654933e9e9723cb399892140
        continue-on-error: true
        with:
          target-dir: /var/lib/containers
          mount-opts: compress-force=zstd:2
          loopback-free: 0.9

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Check Just Syntax
        shell: bash
        run: |
          just check

      - name: get image ref
        id: get_image_ref
        shell: bash
        run: |
          if [[ "${{ matrix.flavor }}" == "base" ]]; then
            IMAGE_SUFFIX=""
          else
            IMAGE_SUFFIX="-${{ matrix.flavor }}"
          fi
          echo "image_suffix=${IMAGE_SUFFIX}" >> $GITHUB_OUTPUT

      - name: Build ISO
        id: build
        uses: hanthor/titanoboa@main
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ matrix.image_name }}${{ steps.get_image_ref.outputs.image_suffix }}:${{ matrix.default_tag }}
          flatpaks-list: ${{ github.workspace }}/system_files/etc/ublue-os/system-flatpaks.list
          hook-post-rootfs: ${{ github.workspace }}/iso_files/configure_lts_iso_anaconda.sh
          builder-distro: ${{ matrix.image_variant == 'yellowfin' && 'almalinux' || matrix.image_variant == 'albacore' && 'almalinux' || matrix.image_variant == 'skipjack' && 'centos' || matrix.image_variant == 'bonito' && 'fedora' }}

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
          FLAVOR: ${{ matrix.flavor }}
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          ISO_NAME="${{ matrix.image_variant }}-${{ matrix.flavor }}-${{ matrix.runner_platform }}"
          sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${ISO_NAME}.iso-CHECKSUM"
          mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${ISO_NAME}.iso"
          echo "output_directory=$OUTPUT_DIRECTORY" >> "${GITHUB_OUTPUT}"

      - name: Upload to Job Artifacts
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.upload_artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.3.3
        with:
          name: "${{ matrix.image_variant }}-${{ matrix.flavor }}-${{ matrix.runner_platform }}"
          if-no-files-found: error
          path: ${{ steps.rename.outputs.output_directory }}

      - name: Upload to CloudFlare
        if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.upload_r2)
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID_2025 }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY_2025 }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT_2025 }}
          SOURCE_DIR: ${{ steps.rename.outputs.output_directory }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy --log-level INFO --checksum "${SOURCE_DIR}" R2:tunaos
